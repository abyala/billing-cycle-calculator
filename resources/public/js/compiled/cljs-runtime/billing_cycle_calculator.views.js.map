{"version":3,"sources":["billing_cycle_calculator/views.cljs"],"mappings":";AAOA,AAAA,AAAMA,AAAaC;AAAnB,AACE,AAAI,AAAA,AAAA,AAAOA;AACT,AAACC,AAAQ,AAAA,AAACC,AAAwBF;;AADpC;;;AAIF,AAAA,AAAMI,AAAaC;AAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;AAAA,AAEuB,AAAA,AAACG,AAAkBD,AAAM,AAAA,AAAA,AAAAF,AAAuBI;;;AAEvE,AAAA,AAAMC,AAAqBH;AAA3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC4E,AAAA,AAAAI,AAACV,AAAaM;;AAE1F,AAAA,AAAMK;AAAN,AACE,AAAMC,AAAe,AAAA,AAAA,AAACC;AAChBC,AAAY,AAAA,AAAA,AAACD;AADnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAiBQR,AAEAI,AAAoBG,AAWpBP,AAEAI,AAAoBK","names":["billing-cycle-calculator.views/format-date","s","cljs-time.format/unparse","cljs_time.format.formatter","p1__44921#","billing-cycle-calculator.views/date-picker","field","re-frame.core/dispatch-sync","cljs_time.format.parse_local","billing-cycle-calculator.views/formatted-date-text","cljs.core/deref","billing-cycle-calculator.views/main-panel","next-statement","re_frame.core.subscribe","next-letter"],"sourcesContent":["(ns billing-cycle-calculator.views\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [billing-cycle-calculator.events :as events]\r\n    [billing-cycle-calculator.subs :as subs]\r\n    [cljs-time.format :refer [parse-local unparse formatter]]))\r\n\r\n(defn format-date [s]\r\n  (if (some? s)\r\n    (unparse (formatter \"MM/dd/yyyy\") s)\r\n    \"\"))\r\n\r\n(defn date-picker [field]\r\n  [:input {:type      \"date\"\r\n           :on-change #(rf/dispatch-sync [field (-> % .-target .-value parse-local)])}])\r\n\r\n(defn formatted-date-text [field]\r\n  [:input {:type \"text\" :readOnly true :enabled \"false\" :tabIndex -1 :value (format-date @field)}])\r\n\r\n(defn main-panel []\r\n  (let [next-statement (rf/subscribe [::subs/next-statement])\r\n        next-letter (rf/subscribe [::subs/next-letter])]\r\n    [:div\r\n     [:table {:padding \"100\"}\r\n      [:tbody\r\n       [:tr\r\n        [:th \"Input Fields\"]\r\n        [:th \"Output Fields\"]]\r\n       [:tr {:height 20}\r\n        [:td {:width \"250\"}\r\n         [:div\r\n          {:title \"Oldest date of service where balance is coming from\"}\r\n          \"Cycle Start:\"]]\r\n        [:td {:width \"250\"}\r\n         [:div \"Next Statement Date:\"]]]\r\n       [:tr\r\n        [:td\r\n         [date-picker ::events/cycle-start-updated]]\r\n        [:td\r\n         [formatted-date-text next-statement]]]\r\n       [:tr {:height 30}]\r\n       [:tr {:height 30}\r\n        [:td\r\n         [:div\r\n          {:title \"If patient has been receiving statements within the Stmt Hx tab, then enter the next statement date set in the future.\"}\r\n          \"Existing Future Statement Date:\"]]\r\n        [:td\r\n         [:div \"Next Letter Date:\"]]]\r\n       [:tr\r\n        [:td\r\n         [date-picker ::events/existing-future-statement-date-updated]]\r\n        [:td\r\n         [formatted-date-text next-letter]]]]]]))\r\n"]}