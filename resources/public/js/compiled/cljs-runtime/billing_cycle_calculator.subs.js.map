{"version":3,"sources":["billing_cycle_calculator/subs.cljs"],"mappings":";AAMA,AAAA,AAACA,AAEC,AAAKC;AAAL,AAAS,AAAA,AAAOA;;AAElB,AAAA,AAACD,AAEC,AAAKC;AAAL,AAAS,AAAA,AAAcA;;AAEzB,AAAA,AAACD,AAEC,AAAKC;AAAL,AAAS,AAAA,AAAkBA;;AAE7B,AAAA,AAACD,AAEC,AAAKC;AAAL,AAAS,AAAA,AAAiBA;;AAE5B,AAAA,AAACD,AAEC,AAAKC;AAAL,AAAS,AAAA,AAAcA;;AAEzB,AAAA,AAAMC,AAAcC,AAAMC;AAA1B,AACE,AAACC,AAAQ,AAACC,AAASH,AAAMC;;AAE3B,AAAA,AAAMG,AAAeC,AAAYC;AAAjC,AACE,AAAM,AAAA,AAAA,AAAOD;AAAb,AACE,AAAME,AAAS,AAACR,AAAaM,AAAY,AAACG;AAA1C,AACE,AACE,AAAA,AAAGD;AADL,AACmB,AAACE,AAAKJ,AAAY,AAAA,AAACK,AACnB,AAACD,AAAKJ,AAAY,AAAA,AAACK;;AAFtC,AAGE,AAAA,AAAA,AAAOJ;AAHT,AAGgCA,AACA,AAACG,AAAKH,AAAqB,AAAA,AAACI;;AAJ5D,AAAA,AAKS,AAACD,AAAK,AAACD,AAAO,AAAA,AAACE,AACf,AAACD,AAAK,AAACD,AAAO,AAAA,AAACE;;;;;AAR5B;;;AAUF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACb,AAMC,AAAAc,AAAsBK;AAAtB,AAAA,AAAAJ,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAYG;AAAZ,AACE,AAAAE,AAAiC,AAACb,AAAcU,AAAMC;AAAtD,AAAA,AAAAE;AAAA,AAAAC,AAAAD;AAAA,AAAAJ,AAAAK,AAAA,AAAA,AAAUC;AAAV,AAAAN,AAAAK,AAAA,AAAA,AAAoBE;AAApB,AACE,AAAA,AAAA,AAACC,AAA4CF,AAAUC;;AACvD,AAAA,AAAA,AAAA,AAAA,AAACC","names":["re_frame.core.reg_sub","db","billing-cycle-calculator.subs/days-between","start","end","cljs-time.core/in-days","cljs-time.core/interval","billing-cycle-calculator.subs/output-fields","cycle-start","existing-future-stmt","days-ago","cljs-time.core/today","cljs_time.core.plus","cljs_time.core.days","p__44909","vec__44910","cljs.core.nth","cycle","existing","_","temp__5733__auto__","vec__44913","next-stmt","next-letter","re-frame.core/dispatch"],"sourcesContent":["(ns billing-cycle-calculator.subs\r\n  (:require\r\n    [re-frame.core :as rf]\r\n    [cljs-time.core :refer [in-days interval today plus days]]\r\n    [billing-cycle-calculator.events :as events]))\r\n\r\n(rf/reg-sub\r\n  ::name\r\n  (fn [db] (:name db)))\r\n\r\n(rf/reg-sub\r\n  ::cycle-start\r\n  (fn [db] (:cycle-start db)))\r\n\r\n(rf/reg-sub\r\n  ::existing-future\r\n  (fn [db] (:existing-future db)))\r\n\r\n(rf/reg-sub\r\n  ::next-statement\r\n  (fn [db] (:next-statement db)))\r\n\r\n(rf/reg-sub\r\n  ::next-letter\r\n  (fn [db] (:next-letter db)))\r\n\r\n(defn days-between [start end]\r\n  (in-days (interval start end)))\r\n\r\n(defn output-fields [cycle-start existing-future-stmt]\r\n  (when (some? cycle-start)\r\n    (let [days-ago (days-between cycle-start (today))]\r\n      (cond\r\n        (< days-ago 47) [(plus cycle-start (days 47))\r\n                         (plus cycle-start (days 92))]\r\n        (some? existing-future-stmt) [existing-future-stmt\r\n                                      (plus existing-future-stmt (days 15))]\r\n        :else [(plus (today) (days 1))\r\n               (plus (today) (days 46))]))))\r\n\r\n(rf/reg-sub\r\n  ::set-output-fields\r\n\r\n  :<- [::cycle-start]\r\n  :<- [::existing-future]\r\n\r\n  (fn [[cycle existing] _]\r\n    (if-let [[next-stmt next-letter] (output-fields cycle existing)]\r\n      (rf/dispatch [::events/output-fields-updated next-stmt next-letter])\r\n      (rf/dispatch [::events/output-fields-updated nil nil]))))\r\n"]}