{"version":3,"sources":["billing_cycle_calculator/business_logic.cljs"],"mappings":";AAGA,AAAA,AAAMA,AAAcC,AAAMC;AAA1B,AACE,AAAI,AAACC,AAAQF,AAAMC;AACjB,AAACE,AAAQ,AAACC,AAASJ,AAAMC;;AACzB,AAAG,AAACF,AAAAA,AAAAA,AAAaE,AAAAA,AAAID,AAAAA;;;AAEzB,AAAA,AAAMK,AAAeC,AAAYC;AAAjC,AACE,AAAA,AAAiBC,AAAKC;AAAtB,AAAA,AAAA,AAAA,AAA0CD,AAAkBC;;AAA5D,AACE,AAAM,AAAA,AAAA,AAAOH;AAAb,AACE,AAAMI,AAAS,AAACX,AAAaO,AAAY,AAACK;AAA1C,AACE,AACE,AAAA,AAAGD;AAAa,AAACE,AAAO,AAACC,AAAKP,AAAY,AAAA,AAACQ,AACnB,AAACD,AAAKP,AAAY,AAAA,AAACQ;;AAF7C,AAGE,AAAA,AAAA,AAAOP;AAAsB,AAACK,AAAOL,AACA,AAACM,AAAKN,AAAqB,AAAA,AAACO;;AAJnE,AAKQ,AAACF,AAAO,AAACC,AAAK,AAACF,AAAO,AAAA,AAACG,AACf,AAACD,AAAK,AAACF,AAAO,AAAA,AAACG;;;;;AARnC","names":["billing-cycle-calculator.business-logic/days-between","start","end","cljs-time.core/before?","cljs-time.core/in-days","cljs-time.core/interval","billing-cycle-calculator.business-logic/output-fields","cycle-start","existing-future-stmt","stmt","letter","days-ago","cljs-time.core/today","output","cljs_time.core.plus","cljs_time.core.days"],"sourcesContent":["(ns billing-cycle-calculator.business-logic\r\n  (:require [cljs-time.core :refer [in-days interval today plus days before?]]))\r\n\r\n(defn days-between [start end]\r\n  (if (before? start end)\r\n    (in-days (interval start end))\r\n    (- (days-between end start))))\r\n\r\n(defn output-fields [cycle-start existing-future-stmt]\r\n  (letfn [(output [stmt letter] {:next-stmt stmt :next-letter letter})]\r\n    (when (some? cycle-start)\r\n      (let [days-ago (days-between cycle-start (today))]\r\n        (cond\r\n          (< days-ago 47) (output (plus cycle-start (days 47))\r\n                                  (plus cycle-start (days 92)))\r\n          (some? existing-future-stmt) (output existing-future-stmt\r\n                                               (plus existing-future-stmt (days 15)))\r\n          :else (output (plus (today) (days 1))\r\n                        (plus (today) (days 46))))))))\r\n"]}