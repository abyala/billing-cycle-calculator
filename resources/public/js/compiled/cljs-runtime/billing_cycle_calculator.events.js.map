{"version":3,"sources":["billing_cycle_calculator/events.cljs"],"mappings":";AAOA,AAAA,AAACA,AAEC,AAAKC,AAAEA;AAAP,AACEC;;AAEJ,AAAA,AAAMC,AAAsBC,AAAGC,AAAKC;AAApC,AACE,AAAMC,AAAO,AAACC,AAAMJ,AAAGE,AAAMD;AAA7B,AAAA,AAAA,AAAA,AACOE,AACmBA;;AAE5B,AAAA,AAACE,AAEC,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAMR;AAANa,AAAAN;AAAA,AAAAO,AAAAD,AAAA,AAAA,AAAehB;AAAf,AAAAiB,AAAAD,AAAA,AAAA,AAAiBZ;AAAjB,AACE,AAAA,AAACF,AAAqBC,AAAGC;;AAE7B,AAAA,AAACI,AAEC,AAAAU,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAA,AAAAL,AAAAK,AAAA,AAAMjB;AAANkB,AAAAF;AAAA,AAAAF,AAAAI,AAAA,AAAA,AAAerB;AAAf,AAAAiB,AAAAI,AAAA,AAAA,AAAiBjB;AAAjB,AACE,AAAA,AAACF,AAAqBC,AAAGC;;AAE7B,AAAA,AAACL,AAEC,AAAAuB,AAAKnB;AAAL,AAAA,AAAAoB,AAAAD;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAASvB;AAAT,AAAAiB,AAAAM,AAAA,AAAA,AAAWC;AAAX,AAAAP,AAAAM,AAAA,AAAA,AAAqBE;AAArB,AACE,AAAA,AAAA,AAAClB,AAAMJ,AAAmBqB,AACHC;;AAE3B,AAAA,AAACC,AAEC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAAC,AAAA,AAAAd,AAAAa,AAAA;AAAAE,AAAA,AAAAf,AAAAa,AAAA;AAAA,AACE,AAAAG,AAAwC,AAACC,AAAkBH,AAAYC;AAAvEC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAAP,AAAA,AAAAT,AAAAgB,AAAA;AAAAN,AAAA,AAAAV,AAAAgB,AAAA;AAAA,AACE,AAAA,AAAA,AAACE,AAAqCT,AAAUC","names":["re_frame.core.reg_event_db","_","billing-cycle-calculator.db/default-db","billing-cycle-calculator.events/input-field-event-fx","db","date","field","new-db","cljs.core.assoc","re_frame.core.reg_event_fx","p__44886","p__44887","map__44888","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__44889","cljs.core.nth","p__44893","p__44894","map__44895","vec__44896","p__44900","vec__44901","next-stmt","next-letter","re-frame.core/reg-fx","p__44904","map__44905","cycle-start","existing-future","map__44907","billing-cycle-calculator.business-logic/output-fields","re-frame.core/dispatch"],"sourcesContent":["(ns billing-cycle-calculator.events\r\n  (:require\r\n    [clojure.string :as str]\r\n    [re-frame.core :as rf]\r\n    [billing-cycle-calculator.db :as db]\r\n    [billing-cycle-calculator.business-logic :as biz]))\r\n\r\n(rf/reg-event-db\r\n  ::initialize-db\r\n  (fn [_ _]\r\n    db/default-db))\r\n\r\n(defn input-field-event-fx [db date field]\r\n  (let [new-db (assoc db field date)]\r\n    {:db new-db\r\n     ::input-fields-updated new-db}))\r\n\r\n(rf/reg-event-fx\r\n  ::cycle-start-updated\r\n  (fn [{db :db} [_ date]]\r\n    (input-field-event-fx db date :cycle-start)))\r\n\r\n(rf/reg-event-fx\r\n  ::existing-future-statement-date-updated\r\n  (fn [{db :db} [_ date]]\r\n    (input-field-event-fx db date :existing-future)))\r\n\r\n(rf/reg-event-db\r\n  ::output-fields-updated\r\n  (fn [db [_ next-stmt next-letter]]\r\n    (assoc db :next-statement next-stmt\r\n              :next-letter next-letter)))\r\n\r\n(rf/reg-fx\r\n  ::input-fields-updated\r\n  (fn [{:keys [:cycle-start :existing-future]}]\r\n    (let [{:keys [:next-stmt :next-letter]} (biz/output-fields cycle-start existing-future)]\r\n      (rf/dispatch [::output-fields-updated next-stmt next-letter]))))"]}